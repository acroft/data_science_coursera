read.fwf("wksst8810.for", widths=62)
read.fwf("wksst8110.for", widths=62)
wksst<-read.fwf("wksst8110.for", widths=62)
sum(wksst[:,9])
sum(wksst[,9])
sum(wksst[,4])
sum(wksst[,1])
summary(wksst)
head(wksst)
nchar(readLines('wksst8110.for',10))
nchar(readLines('wksst8110.for',20))
summary(wksst)
readLines('wksst8110.for',10)
wksst<-read.fwf("wksst8110.for", widths=c(15,4,4,9,4,9,4,9,4))
summary(wksst)
head(wksst)
sum(wksst[,9])
sum(wksst[5:,9])
len(wksst)
nrow(wksst)
sum(wksst[5:1258,9])
sum(wksst$N4)
sum(wksst$v4)
sum(wksst$V4)
sum(as.numeric(wksst$V4))
sum(as.numeric(as.character(wksst$V4))
)
sum(as.numeric(as.character(wksst$V4, na.rm=TRUE))
)
sum(as.numeric(as.character(wksst[5:1258,4], na.rm=TRUE))
)
cnt=read.csv('cnt.csv')
gdp = read.csv('gdp.csv')
low_mid_cnt = cnt$Income.Group[cnt$Income.Group=="Lower middle"]
head(cnt$Income.Group)
low_mid_cnt = cnt$Income.Group[cnt$Income.Group=="Lower middle income"]
low_mid_cnt
low_mid_cnt = cnt$CountryCode[cnt$Income.Group=="Lower middle income"]
low_mid_cnt
length(low_mid_cnt)
top38gdp = gdp$X[parse_integer(gdp$Gross.domestic.product.2012) <= 38]
top38gdp = gdp$X[parse.integer(gdp$Gross.domestic.product.2012) <= 38]
top38gdp = gdp$X[parse_integer(gdp$Gross.domestic.product.2012) <= 38]
parse_integer
??parse_integer
library(readr)
top38gdp = gdp$X[parse_integer(gdp$Gross.domestic.product.2012) <= 38]
top38gdp
length(top38gdp)
a  =na.omit(top38gdp)
a
length(a)
intersect(a, low_mid_cnt)
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package="lubridate")
help(package=lubridate)
this_day=today()
this_day<=today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hmms("03:22:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seonds=55)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
update(this_moment, hours=23, minutes=08, seconds=55)
update(this_moment, hours=10, minutes=16, seconds=0)
this_moment <- update(this_moment, hours=23, minutes=08, seconds=55)
this_moment
?now
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(hours=17, minutes=34)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive<-with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
mdy("June 17, 2008")
mdy("June 17, 2008", tz="Singapore")
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long<-interval(last_time, arrive)
as.period(how_long)
stopwatch()
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', hid.csv'')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'hid.csv')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'hid.csv', mode='wd')
read.csv('hid.csv')
hid = read.csv('hid.csv')
strsplit(hid, "wtgp")
strsplit(names(hid), "wtgp")
?strsplit
strsplit(names(hid), "wtgp")
strsplit("wtgp15", "wtgp")
strsplit(names(hid), "wgtp")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', 'fgdp.csv')
gdp<- read.csv('fgdp.csv')
names(gdp)
head(gdp, n=10)
mean(parse_integer(sub(gdp$X.3, ',', ''))
)
mean(parse_integer(sub(gdp$X.3, ',', ''), na.rm=TRUE)
)
mean(parse_integer(sub(gdp$X.3, ',', '')), na.rm=TRUE)
mean(parse_integer(sub(gdp[5:,]$X.3, ',', '')), na.rm=TRUE)
gdp[5:,]
gdp[5:length(gdp),]
gdp[5:dims(gdp),]
gdp[5:dim(gdp),]
mean(parse_integer(sub(gdp[5:dim(gdp),]$X.3, ',', '')), na.rm=TRUE)
mean(parse_integer(sub(gdp$X.3[5:length(gdp$X.3),], ',', '')), na.rm=TRUE)
is.integer('hello')
mean(parse_integer(sub(gdp$X.3[is.integer(gdp$X.3)], ',', '')), na.rm=TRUE)
mean(parse_integer(sub(gdp$X.3[is.integer(gdp$X.3)], ',', '')), na.rm=TRUE)
?sub
mean(parse_integer(sub(',', '', gdp$X.3[is.integer(gdp$X.3)])), na.rm=TRUE)
mean(parse_integer(sub(',', '', )), na.rm=TRUE)
gdps <- gdp$X.3[is.integer(gdp$X.3)]
head(gdps)
parse_integer(gdps)
parse_integer(sub(',', '', gdps)
)
a='hi,3'
a
sub(',','',a)
gdps
sub(',', '', gdps)
gdps
sub(',','',gdp$X.3)
gdp$X.3<-sub(',','',gdp$X.3)
mean(parse_integer(gdp$X.3), na.rm=TRUE)
gdp$X.3<-gsub(',','',gdp$X.3)
mean(parse_integer(gdp$X.3), na.rm=TRUE)
mean(parse_integer(gdp$X.3[is.integer(parse_integer(gdp$Gross.domestic.product.2012))]), na.rm=TRUE)
is.integer(parse_integer(gdp$Gross.domestic.product.2012))
parse_integer(gdp$Gross.domestic.product.2012)
parse_integer(gdp$Gross.domestic.product.2012, na.rm=TRUE)
parse_integer(gdp$Gross.domestic.product.2012)
na.omit(parse_integer(gdp$Gross.domestic.product.2012))
length(na.omit(parse_integer(gdp$Gross.domestic.product.2012)))
mean(parse_integer(gdp$X.3[!is.na(parse_integer(gdp$Gross.domestic.product.2012))]), na.rm=TRUE)
head(gdp)
grep("United$", X.2)
grep("United$", gdp$X.2)
grep("^United", gdp$X.2)
grep("*United", gdp$X.2)
grep("*United", gdp$X.2)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv', 'cnt.csv')
cnt<-read.csv('cnt.csv')
names(cnt)
names(gdp)
head(gdp)
head(gdp, n=50)
names(cnt)
head(cnt)
head(cnt)
names(cnt)
cnt$Special.Notes
gdcnts <- cnt$Special.Notes[grep('Fiscal year end: ', cnt$Special.Notes]
gdcnts <- cnt$Special.Notes[grep('Fiscal year end: ', cnt$Special.Notes)]
gdcnts
gdcnts[grep('end: June', gdcnts)]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
names(amzn)
head(sampleTimes)
tail(sampleTimes)
smp<-ymd(sampleTimes)
smp
year(smp) == 2012
yrs <- year(smp) == 2012
sum(yrs)
yrs <- year(smp) == 2012 & day(smp) == 2
yrs
sum(yrs)
yrs <- year(smp) == 2012 & day(smp) == 'Monday'
sum(year(smp) == 2012 & day(smp) == 'Monday')
sum(year(smp) == 2012 & day(smp) == 1)
sum(year(smp) == 2012 & day(smp) == 2)
sum(year(smp) == 2012 & day(smp) == 3)
sum(year(smp) == 2012 & day(smp) == 4)
sum(year(smp) == 2012
)
sum(year(smp) == 2012 & day(smp) == 5)
sum(year(smp) == 2012 & wday(smp) == 5)
sum(year(smp) == 2012 & wday(smp) == 1)
sum(year(smp) == 2012 & wday(smp) == 2)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages('ggplot2')
swirl()
head(pollution)
dim(pollution)
summay(pollution$pm25)
summay(pollution$pm25)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col='blue')
abline(h=12)
hist(ppm, col='green')
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col='green')
abline(v=12, lwd=2)
abline(v=median(ppm), col='magenta', lwd=4)
names(pollution)
reg=table(pollution$region)
reg<-table(pollution$region)
reg
barplot(reg, col='wheat', main="Number of Counties in Each Region")
boxplot(pm25~region, data=pollution, col='red')
par(mfrow=c(2,1),mar=c(4,4,2,1))
subsect(pollution, region='east')
subset(pollution, region='east')
east<-subset(pollution, region='east')
east<-subset(pollution, region=='east')
head(east)
hist(east$pm25, col='green')
west<-subset(pollution, region=='west')
hist(subset(pollution, region=='west')$pm25, col='green')
with(pollution, plot(latitude, pm25))
abline(12, lwd=2, lty=2)
?abline
abline(x=12, lwd=2, lty=2)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, pollution$ppm, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2)mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2); mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2)
mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2)
)
par(mfrow = c(1, 2),mar = c(5, 4, 2, 1))
west<-subset(pollution, region=='west')
plot(west$latitude, west$pm25, main="West")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file='geyserplot.png')
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, date=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$modell)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title("Ozone and Wind in New York Ciry")
title("Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title("Ozone and Wind in New York Ciry")
title("Ozone and Wind in New York City")
length(par)
length(par())
names(par())
par()$pin
par('fg')
par('pch')
par('lty')
plt(airquality$Wind, airquality$Ozone, type='n')
plot(airquality$Wind, airquality$Ozone, type='n')
title("Wind and Ozone in NYC")
may=subset(airquality, airquality$Month==5)
may<-subset(airquality, Month==5)
with(airquality, points(Wind, Ozone, )
/
,dop]doPrimitiveMethod()
?points
with(airquality, points(Wind, Ozone, pch=24, col='blue')
)
with(airquality, points(Wind, Ozone, pch=17, col='blue'))
points(may$Wind, may$Ozone, pch=17, col='blue')
points(may$Wind, may$Ozone, col='blue', pch=17)
notmay=subset(airquality, Month!=5)
notmay<-subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, pch=8, col='red')
points(notmay$Wind, notmay$Ozone, col='red', pch=8)
legend("topright", pch=(17,8), col=('blue','red'), legend=('May', 'Other Months'))
legend('topright', pch=(17,8), col=('blue','red'), legend=('May', 'Other Months'))
?legend
legend(legend='topright', pch=(17,8), col=('blue','red'), legend=('May', 'Other Months'))
legend(legend='topright', pch=(17,8), col=('blue','red'), legend=('May', 'Other Months'))
legend("topright", pch=(17,8), col=('blue','red'), legend=('May', 'Other Months'))
legend("topright", legend=c('May', 'Other Months'), pch=c(17,8), col=c('blue','red'))
abline(h=airquality$Wind, lty=2, lwd=2)
abline(v=airquality$Wind, lty=2, lwd=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
postscript()
dev.cur()
dev.off()
plot(c(1,2,3), c(4,5,6))
dev.copy2pdf()
?dev.copy2pdf
dev.copy2pdf(file='hello.pdf')
install.packages(c("assertthat", "curl", "DBI", "digest", "git2r", "jsonlite", "memoise", "openssl", "quantmod", "Rcpp", "readxl", "stringi", "stringr", "swirl", "XML", "zoo"))
setwd('Coursera')
setwd('data_science')
setwd('data_science_coursera')
setwd('exploratory_data_analysis')
head('household_power_consumption.txt')
file.size('household_power_consumption.txt')
hpc = read.table('household_power_consumption.txt', nrows=10)
str(hpc)
head(hpc)
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';')
head(hpc)
head(hpc)
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';', header=TRUE)
head(hpc)
head(hpc)
head(hpc)
hpc$Date
hpc$Date[0]
hpc$Date[1]
?read.table
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';', header=TRUE, colClasses=c('Date','Date', 'numeric', 'numeric', 'numeric', 'numeric', 'integer', 'integer', 'integer'))
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';', header=TRUE, colClasses=c('Date','Date', 'numeric', 'numeric', 'numeric', 'numeric', 'integer', 'integer', 'integer'))
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';', header=TRUE, colClasses=c('Date','Date', 'numeric', 'numeric', 'numeric', 'numeric', 'integer', 'integer', 'numeric'))
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';', header=TRUE, colClasses=c('Date','Date', 'numeric', 'numeric', 'numeric', 'numeric', 'integer', 'numeric', 'integer'))
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';', header=TRUE, colClasses=c('Date','Date', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'integer', 'integer'))
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';', header=TRUE, colClasses=c('Date','Date', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'))
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';', header=TRUE, colClasses=c('Date','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'))
hpc
hpc$Time = as.Date()
?as.Date
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';', header=TRUE, colClasses=c('character','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'))
hpc$DateTime <- strptime(hpc$Date + hpc$Time)
strptime(c(hpc$Date,hpc$Time))
strptime(c(hpc$Date, ' ', hpc$Time), format='%Y-%m-%d %H:%M:%S')
strptime(c(hpc$Date[0], ' ', hpc$Time[0]), format='%Y-%m-%d %H:%M:%S')
c(hpc$Date[0], ' ', hpc$Time[0])
hpc
hpc$Date[0]
hpc$Date
hpc$Date[0]
hpc$Date[1]
strptime(c(hpc$Date[1], ' ', hpc$Time[1]), format='%Y-%m-%d %H:%M:%S')
c('jell',' ', 'fwfwe')
paste('faea',' ', 'dwadwa')
strptime(paste(hpc$Date, ' ', hpc$Time), format='%Y-%m-%d %H:%M:%S')
strptime(paste0(hpc$Date, ' ', hpc$Time), format='%Y-%m-%d %H:%M:%S')
paste(hpc$Date, ' ' hpc$Time)
paste(hpc$Date, ' ', hpc$Time)
paste(hpc$Date, hpc$Time)
strptime(paste0(hpc$Date, hpc$Time), format='%Y-%m-%d %H:%M:%S')
strptime(paste(hpc$Date, hpc$Time), format='%Y-%m-%d %H:%M:%S')
strptime(paste(hpc$Date, hpc$Time), format='%Y/%m/%d %H:%M:%S')
strptime(paste(hpc$Date, hpc$Time), format='%d/%m/%Y %H:%M:%S')
hpc$DateTime <- strptime(paste(hpc$Date, hpc$Time), format='%d/%m/%Y %H:%M:%S')
hpc
hpc = read.table('household_power_consumption.txt', sep=';', header=TRUE, colClasses=c('Date','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'))
hpc = read.table('household_power_consumption.txt', nrows=10, sep=';', header=TRUE, colClasses=c('character','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'))
hpc = read.table('household_power_consumption.txt', sep=';', header=TRUE, colClasses=c('Date','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'))
?read.table
hpc = read.table('household_power_consumption.txt', sep=';', header=TRUE, colClasses=c('Date','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'), na.strings='?')
hpc2 <- hpc[Date==as.Date("2007/02/01") | Date==as.Date("2007/02/02")]
hpc2 <- hpc[hpc$Date==as.Date("2007/02/01") | hpc$Date==as.Date("2007/02/02")]
summary(hpc2$Date)
dims(hpc2)
size(hpc2)
length(hpc2)
dim(hpc2)
as.Date("2007/02/01")
type(as.Date("2007/02/01"))
typeof(as.Date("2007/02/01"))
sum(hpc$Date == as.Date("2007/02/1"))
sum(hpc$Date == as.Date("2007/02/01"))
head(hpc$Date,n=100)
head(hpc$Date)
hpc = read.table('household_power_consumption.txt', sep=';', header=TRUE, colClasses=c('character','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'), na.strings='?')
hpc = read.table('household_power_consumption.txt', sep=';', header=TRUE, colClasses=c('character','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'), na.strings='?', nrows=10)
hpc
hpc
hpc <- hpc[hpc$Date==as.Date("01/02/2007") | hpc$Date==as.Date("02/02/2007")]
hpc
hpc <- hpc[hpc$Date==as.Date("01/02/2007") | hpc$Date==as.Date("02/02/2007")]
hpc = read.table('household_power_consumption.txt', sep=';', header=TRUE, colClasses=c('character','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'), na.strings='?', nrows=10)
hpc
hpc <- hpc[hpc$Date==as.Date("16/12/2006") | hpc$Date==as.Date("02/02/2007")]
hpc
hpc <- hpc[hpc$Date==as.Date("16/12/2006") | hpc$Date==as.Date("02/02/2007")]
hpc$Date==as.Date("16/12/2006")
hpc$Date==as.Date("16/12/2007")
hpc$Date==as.Date("16/12/2008")
hpc$Date
hpc$Date=="16/12/2008"
hpc$Date=="16/12/2006"
hpc = read.table('household_power_consumption.txt', sep=';', header=TRUE, colClasses=c('Date','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'), na.strings='?', nrows=10)
hpc$Date
hpc$Date=="16/12/2006"
hpc$Date=="16/12/2007"
hpc$Date=="16/12/2"
hpc$Date=="16/12/20"
hpc$Date==as.Date("16/12/2008")
hpc$Date==as.Date("16/12/2009")
hpc$Date===as.Date("16/12/2009")
1 == 2
1 == 1
as.date("1/1/1900")
as.Date("1/1/1900")
as.Date("1/1/1900") == as.Date("1/1/1900")
as.Date("1/1/1900") == as.Date("1/1/1901")
as.Date("1/1/1900") == as.Date("19/1/1901")
as.Date("1/1/1900") == as.Date("19/1/19")
as.Date("2/1/1900") == as.Date("19/1/19")
as.Date("19/1/1900") == as.Date("19/1/19")
as.Date("19/1/1900") == as.Date("19/13/19")
as.Date("19/1/1900") == as.Date("19/12/19")
as.Date("19/1/1900") == as.Date("19/1/19")
as.Date("19/1/1900") == as.Date("9/1/19")
hpc$Date==as.Date("2006/12/16")
hpc$Date==as.Date("2007/12/16")
hpc$Date
hpc$Date==as.Date("2007/12/20")
hpc = read.table('household_power_consumption.txt', sep=';', header=TRUE, colClasses=c('character','character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'), na.strings='?', nrows=10)
hpc$Date
hpc$Date == "16/12/2006"
hpc$Date == "16/12/2007"
hpc$Date == "16/12/2007"
hpc$Date == "16/12/2006"
?as.Date
hpc$Date <- as.Date(hpc$Date, format="%d/%m/%Y")
hpc$Date
hpc$Date == as.Date("16/12/2006", format="%d/%m/%Y")
hpc$Date == as.Date("16/12/2007", format="%d/%m/%Y")
hpc$Date == as.Date("16/12/2006", format="%d/%m/%Y")
hpc$Date == as.Date("17/12/2006", format="%d/%m/%Y")
source('~/Coursera/data_science/data_science_coursera/exploratory_data_analysis/plot1.R')
hpc
hpc
hpc
source('~/Coursera/data_science/data_science_coursera/exploratory_data_analysis/plot1.R')
source('~/Coursera/data_science/data_science_coursera/exploratory_data_analysis/plot1.R')
hpc
source('~/Coursera/data_science/data_science_coursera/exploratory_data_analysis/plot1.R')
hpc
source('~/Coursera/data_science/data_science_coursera/exploratory_data_analysis/plot1.R')
head(hpc)
hpc
